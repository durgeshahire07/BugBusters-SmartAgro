{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\FINAL\\\\Project\\\\pgp\\\\src\\\\otp.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Content, Item, Input } from 'native-base';\nimport { Grid, Col } from 'react-native-easy-grid';\n\nvar otp = function (_React$Component) {\n  _inherits(otp, _React$Component);\n\n  var _super = _createSuper(otp);\n\n  function otp() {\n    var _this;\n\n    _classCallCheck(this, otp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      otp: []\n    };\n    _this.otpTextInput = [];\n    return _this;\n  }\n\n  _createClass(otp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.otpTextInput[0]._root.focus();\n    }\n  }, {\n    key: \"renderInputs\",\n    value: function renderInputs() {\n      var _this2 = this;\n\n      var inputs = Array(6).fill(0);\n      var txt = inputs.map(function (i, j) {\n        return React.createElement(Col, {\n          key: j,\n          style: styles.txtMargin,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 23\n          }\n        }, React.createElement(Item, {\n          regular: true,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 61\n          }\n        }, React.createElement(Input, {\n          style: [styles.inputRadius, {\n            borderRadius: 10\n          }],\n          keyboardType: \"numeric\",\n          onChangeText: function onChangeText(v) {\n            return _this2.focusNext(j, v);\n          },\n          onKeyPress: function onKeyPress(e) {\n            return _this2.focusPrevious(e.nativeEvent.key, j);\n          },\n          ref: function ref(_ref) {\n            return _this2.otpTextInput[j] = _ref;\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 17\n          }\n        })));\n      });\n      return txt;\n    }\n  }, {\n    key: \"focusPrevious\",\n    value: function focusPrevious(key, index) {\n      if (key === 'Backspace' && index !== 0) this.otpTextInput[index - 1]._root.focus();\n    }\n  }, {\n    key: \"focusNext\",\n    value: function focusNext(index, value) {\n      if (index < this.otpTextInput.length - 1 && value) {\n        this.otpTextInput[index + 1]._root.focus();\n      }\n\n      if (index === this.otpTextInput.length - 1) {\n        this.otpTextInput[index]._root.blur();\n      }\n\n      var otp = this.state.otp;\n      otp[index] = value;\n      this.setState({\n        otp: otp\n      });\n      this.props.getOtp(otp.join(''));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Content, {\n        padder: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }\n      }, React.createElement(Grid, {\n        style: styles.gridPad,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }\n      }, this.renderInputs()));\n    }\n  }]);\n\n  return otp;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  gridPad: {\n    padding: 30\n  },\n  txtMargin: {\n    margin: 3\n  },\n  inputRadius: {\n    textAlign: 'center'\n  }\n});\nexport default otp;","map":{"version":3,"sources":["D:/FINAL/Project/pgp/src/otp.js"],"names":["React","Content","Item","Input","Grid","Col","otp","state","otpTextInput","_root","focus","inputs","Array","fill","txt","map","i","j","styles","txtMargin","inputRadius","borderRadius","v","focusNext","e","focusPrevious","nativeEvent","key","ref","index","value","length","blur","setState","props","getOtp","join","gridPad","renderInputs","Component","StyleSheet","create","padding","margin","textAlign"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,KAAxB,QAAqC,aAArC;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,wBAA1B;;IAEMC,G;;;;;;;;;;;;;;;UACFC,K,GAAM;AAACD,MAAAA,GAAG,EAAC;AAAL,K;UACNE,Y,GAAe,E;;;;;;wCAEK;AAChB,WAAKA,YAAL,CAAkB,CAAlB,EAAqBC,KAArB,CAA2BC,KAA3B;AACH;;;mCAEc;AAAA;;AACX,UAAMC,MAAM,GAAGC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,CAAd,CAAf;AACA,UAAMC,GAAG,GAAGH,MAAM,CAACI,GAAP,CACR,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAU,oBAAC,GAAD;AAAK,UAAA,GAAG,EAAEA,CAAV;AAAa,UAAA,KAAK,EAAEC,MAAM,CAACC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAsC,oBAAC,IAAD;AAAM,UAAA,OAAO,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAC5C,oBAAC,KAAD;AACI,UAAA,KAAK,EAAE,CAACD,MAAM,CAACE,WAAR,EAAqB;AAAEC,YAAAA,YAAY,EAAE;AAAhB,WAArB,CADX;AAEI,UAAA,YAAY,EAAC,SAFjB;AAGI,UAAA,YAAY,EAAE,sBAAAC,CAAC;AAAA,mBAAI,MAAI,CAACC,SAAL,CAAeN,CAAf,EAAkBK,CAAlB,CAAJ;AAAA,WAHnB;AAII,UAAA,UAAU,EAAE,oBAAAE,CAAC;AAAA,mBAAI,MAAI,CAACC,aAAL,CAAmBD,CAAC,CAACE,WAAF,CAAcC,GAAjC,EAAsCV,CAAtC,CAAJ;AAAA,WAJjB;AAKI,UAAA,GAAG,EAAE,aAAAW,IAAG;AAAA,mBAAI,MAAI,CAACpB,YAAL,CAAkBS,CAAlB,IAAuBW,IAA3B;AAAA,WALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD4C,CAAtC,CAAV;AAAA,OADQ,CAAZ;AAWA,aAAOd,GAAP;AACH;;;kCAEaa,G,EAAKE,K,EAAO;AACtB,UAAIF,GAAG,KAAK,WAAR,IAAuBE,KAAK,KAAK,CAArC,EACI,KAAKrB,YAAL,CAAkBqB,KAAK,GAAG,CAA1B,EAA6BpB,KAA7B,CAAmCC,KAAnC;AACP;;;8BAESmB,K,EAAOC,K,EAAO;AACpB,UAAID,KAAK,GAAG,KAAKrB,YAAL,CAAkBuB,MAAlB,GAA2B,CAAnC,IAAwCD,KAA5C,EAAmD;AAC/C,aAAKtB,YAAL,CAAkBqB,KAAK,GAAG,CAA1B,EAA6BpB,KAA7B,CAAmCC,KAAnC;AACH;;AACD,UAAImB,KAAK,KAAK,KAAKrB,YAAL,CAAkBuB,MAAlB,GAA2B,CAAzC,EAA4C;AACxC,aAAKvB,YAAL,CAAkBqB,KAAlB,EAAyBpB,KAAzB,CAA+BuB,IAA/B;AACH;;AACD,UAAM1B,GAAG,GAAG,KAAKC,KAAL,CAAWD,GAAvB;AACAA,MAAAA,GAAG,CAACuB,KAAD,CAAH,GAAaC,KAAb;AACA,WAAKG,QAAL,CAAc;AAAE3B,QAAAA,GAAG,EAAHA;AAAF,OAAd;AACA,WAAK4B,KAAL,CAAWC,MAAX,CAAkB7B,GAAG,CAAC8B,IAAJ,CAAS,EAAT,CAAlB;AACH;;;6BAGQ;AACL,aACI,oBAAC,OAAD;AAAS,QAAA,MAAM,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAElB,MAAM,CAACmB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKC,YAAL,EADL,CADJ,CADJ;AAOH;;;;EAnDatC,KAAK,CAACuC,S;;AAsDxB,IAAMrB,MAAM,GAAGsB,UAAU,CAACC,MAAX,CAAkB;AAC7BJ,EAAAA,OAAO,EAAE;AAAEK,IAAAA,OAAO,EAAE;AAAX,GADoB;AAE7BvB,EAAAA,SAAS,EAAE;AAAEwB,IAAAA,MAAM,EAAE;AAAV,GAFkB;AAG7BvB,EAAAA,WAAW,EAAE;AAAEwB,IAAAA,SAAS,EAAE;AAAb;AAHgB,CAAlB,CAAf;AAMA,eAAetC,GAAf","sourcesContent":["import React from 'react';\r\nimport { StyleSheet } from 'react-native';\r\nimport { Content, Item, Input } from 'native-base';\r\nimport { Grid, Col } from 'react-native-easy-grid';\r\n\r\nclass otp extends React.Component {\r\n    state={otp:[]};\r\n    otpTextInput = [];\r\n\r\n    componentDidMount() {\r\n        this.otpTextInput[0]._root.focus();\r\n    }\r\n\r\n    renderInputs() {\r\n        const inputs = Array(6).fill(0);\r\n        const txt = inputs.map(\r\n            (i, j) => <Col key={j} style={styles.txtMargin}><Item regular>\r\n                <Input\r\n                    style={[styles.inputRadius, { borderRadius: 10 }]}\r\n                    keyboardType=\"numeric\"\r\n                    onChangeText={v => this.focusNext(j, v)}\r\n                    onKeyPress={e => this.focusPrevious(e.nativeEvent.key, j)}\r\n                    ref={ref => this.otpTextInput[j] = ref}\r\n                />\r\n            </Item></Col>\r\n        );\r\n        return txt;\r\n    }\r\n\r\n    focusPrevious(key, index) {\r\n        if (key === 'Backspace' && index !== 0)\r\n            this.otpTextInput[index - 1]._root.focus();\r\n    }\r\n\r\n    focusNext(index, value) {\r\n        if (index < this.otpTextInput.length - 1 && value) {\r\n            this.otpTextInput[index + 1]._root.focus();\r\n        }\r\n        if (index === this.otpTextInput.length - 1) {\r\n            this.otpTextInput[index]._root.blur();\r\n        }\r\n        const otp = this.state.otp;\r\n        otp[index] = value;\r\n        this.setState({ otp });\r\n        this.props.getOtp(otp.join(''));\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Content padder>\r\n                <Grid style={styles.gridPad}>\r\n                    {this.renderInputs()}\r\n                </Grid>\r\n            </Content>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    gridPad: { padding: 30 },\r\n    txtMargin: { margin: 3 },\r\n    inputRadius: { textAlign: 'center' }\r\n});\r\n\r\nexport default otp;"]},"metadata":{},"sourceType":"module"}